#!/usr/bin/env python3
"""
Natural Language Report Generator Script
Generate business-friendly reports from existing JSON analysis files.

This standalone script allows users to generate natural language business reports
from previously saved JSON analysis files. Key features:
- Converts technical analysis data into executive summaries
- Creates stakeholder-friendly narrative reports
- Supports custom output file paths
- Provides comprehensive error handling and validation
- Shows preview of generated reports for quick review

Designed for business users who need to communicate technical analysis
findings to non-technical stakeholders, investment committees, or clients.

Usage:
    python generate_report.py analysis_MMM_20250611_143413.json
    python generate_report.py analysis_AAPL_20250611_143413.json --output custom_report.txt
"""

import sys
import argparse
from pathlib import Path

# Add src to path for imports - enables clean module imports from src/ directory
sys.path.append(str(Path(__file__).parent / "src"))

# Import the natural language report generation module
from src.reports.natural_language_generator import generate_report_from_json


def main():
    """
    Main function to handle command line arguments and generate reports.
    
    This function orchestrates the complete report generation workflow:
    1. Parse and validate command line arguments
    2. Validate input file existence and accessibility
    3. Determine appropriate output file path (auto-generate or custom)
    4. Execute report generation with error handling
    5. Display results and provide user feedback
    6. Show preview of generated content for immediate review
    
    The function emphasizes user experience with clear status messages,
    comprehensive error handling, and helpful feedback throughout the process.
    """
    # Set up comprehensive argument parser with detailed help and examples
    parser = argparse.ArgumentParser(
        description="Generate business-friendly natural language reports from JSON analysis files",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python generate_report.py analysis_MMM_20250611_143413.json
    → Generates: analysis_MMM_20250611_143413_BUSINESS_REPORT.txt
    
  python generate_report.py analysis_AAPL_20250611_143413.json --output apple_report.txt
    → Generates: apple_report.txt
    
  python generate_report.py my_analysis.json --output reports/detailed_analysis.txt
    → Generates: reports/detailed_analysis.txt (creates directory if needed)
        """
    )
    
    # Required positional argument - the JSON analysis file to process
    parser.add_argument(
        'json_file',
        help='Path to the JSON analysis file generated by run_analysis.py'
    )
    
    # Optional output file specification - allows custom naming and organization
    parser.add_argument(
        '--output', '-o',
        help='Output file path for the report (if not specified, uses auto-generated name based on input filename)'
    )
    
    # Parse command line arguments with built-in help and error handling
    args = parser.parse_args()
    
    # Input file validation - ensure file exists and is accessible
    # This prevents cryptic errors later in the process
    if not Path(args.json_file).exists():
        print(f"❌ Error: File '{args.json_file}' does not exist")
        print("💡 Please check:")
        print("   • File path is correct")
        print("   • File has not been moved or deleted")
        print("   • You have read permissions for the file")
        sys.exit(1)
    
    # Determine output file path - support both auto-generation and custom paths
    if args.output:
        # User specified custom output path
        output_path = args.output
    else:
        # Auto-generate output filename based on input file
        # Maintains consistent naming convention: [original_name]_BUSINESS_REPORT.txt
        input_path = Path(args.json_file)
        output_path = str(input_path.with_suffix('')) + '_BUSINESS_REPORT.txt'
    
    # Create output directory if it doesn't exist - ensures path availability
    # This allows users to specify nested directory structures that don't exist yet
    output_dir = Path(output_path).parent
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Display professional header and processing status
    print("=" * 60)
    print("📝 NATURAL LANGUAGE REPORT GENERATOR")
    print("=" * 60)
    print(f"📂 Input file: {args.json_file}")
    print(f"📄 Output file: {output_path}")
    print()
    
    try:
        # Execute the report generation process
        print("🔄 Generating business-friendly report...")
        print("   • Loading JSON analysis data...")
        print("   • Processing technical indicators...")
        print("   • Creating executive summary...")
        print("   • Analyzing historical patterns...")
        print("   • Generating risk assessment...")
        print("   • Compiling final report...")
        
        # Call the main report generation function
        # This handles all the complex business logic of converting technical data to narratives
        report = generate_report_from_json(args.json_file, output_path)
        
        # Validate successful report generation
        if report and not report.startswith("Error"):
            print("✅ Report generated successfully!")
            print()
            
            # Show a preview of the report for immediate user feedback
            # This helps users quickly verify the content without opening the file
            print("📋 REPORT PREVIEW:")
            print("─" * 60)
            
            # Extract first 20 lines for preview - provides good overview without overwhelming
            lines = report.split('\n')
            preview_lines = []
            for line in lines:
                preview_lines.append(line)
                if len(preview_lines) >= 20:  # Optimal preview length for terminal display
                    break
            
            # Display formatted preview
            print('\n'.join(preview_lines))
            
            # Show remaining content indicator and file location
            if len(lines) > 20:
                print("...")
                print(f"(Showing first 20 lines of {len(lines)} total lines)")
            
            print("─" * 60)
            print(f"📖 Full report available in: {output_path}")
            print()
            
            # Highlight key features of the generated report
            print("🎯 The report includes:")
            print("   • Executive Summary with key findings and investment thesis")
            print("   • Current Market Analysis with technical indicator interpretation")
            print("   • Historical Pattern Analysis with similar period comparisons")
            print("   • Risk Assessment with position sizing recommendations")
            print("   • Future Outlook with probability-based projections")
            print("   • Detailed Historical Comparisons with specific dates and outcomes")
            print("   • Technical Summary for reference and validation")
            
        else:
            # Handle report generation failure
            print("❌ Failed to generate report")
            if report:
                print(f"Error details: {report}")
            print("💡 Please check:")
            print("   • JSON file contains valid analysis data")
            print("   • JSON file is not corrupted")
            print("   • You have write permissions for the output directory")
    
    except Exception as e:
        # Comprehensive error handling with user-friendly messages
        print(f"❌ Error: {str(e)}")
        print("💡 Possible causes:")
        print("   • Invalid or corrupted JSON file")
        print("   • Insufficient disk space")
        print("   • Permission issues with output directory")
        print("   • System resource constraints")
        sys.exit(1)
    
    # Display completion status and next steps
    print()
    print("=" * 60)
    print("🎉 Report Generation Complete!")
    print("=" * 60)
    print("📧 The report is ready for:")
    print("   • Sharing with investment committees")
    print("   • Client presentations and communication")
    print("   • Internal research documentation")
    print("   • Stakeholder briefings and updates")
    print()
    print("💡 Pro tip: You can regenerate reports anytime from the same JSON file")
    print("   with different output names for various audiences.")


# Standard Python script entry point
if __name__ == "__main__":
    main() 